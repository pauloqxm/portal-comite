# =====================================================================
# üìà Evolu√ß√£o da Vaz√£o Operada por Reservat√≥rio
# =====================================================================
st.subheader("üìà Evolu√ß√£o da Vaz√£o Operada por Reservat√≥rio")

# Verificar se h√° dados para mostrar
if not df_filtrado.empty and "Reservat√≥rio Monitorado" in df_filtrado.columns:
    fig = go.Figure()
    cores = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#17becf", "#e377c2"]
    reservatorios = df_filtrado["Reservat√≥rio Monitorado"].dropna().unique()

    if len(reservatorios) > 0:
        for i, r in enumerate(reservatorios):
            dfr = (
                df_filtrado[df_filtrado["Reservat√≥rio Monitorado"] == r]
                .sort_values("Data")
                .groupby("Data", as_index=False)
                .last()
            )

            if not dfr.empty:
                # Linha principal (Vaz√£o Operada)
                y_vals, unit_suffix = convert_vazao(dfr["Vaz√£o Operada"], unidade_sel)
                fig.add_trace(go.Scatter(
                    x=dfr["Data"], y=y_vals, mode="lines+markers", name=r,
                    line=dict(shape="hv", width=2, color=cores[i % len(cores)]),
                    marker=dict(size=5),
                    hovertemplate=f"<b>{r}</b><br>Data: %{{x|%d/%m/%Y}}<br>"
                                  f"Vaz√£o: %{{y:.3f}} {unit_suffix}<extra></extra>"
                ))

                # Caso tenha apenas um reservat√≥rio selecionado ‚Üí linhas extras
                if len(reservatorios) == 1 and len(dfr) > 1:
                    # M√©dia ponderada no per√≠odo com base em dias "ativos"
                    dfr = dfr.copy()
                    dfr["dias_ativos"] = dfr["Data"].diff().dt.days.fillna(0)
                    if not dfr.empty:
                        dmax = df_filtrado["Data"].max()
                        dfr.loc[dfr.index[-1], "dias_ativos"] = (dmax - dfr["Data"].iloc[-1]).days + 1

                        media_pond = (dfr["Vaz√£o Operada"] * dfr["dias_ativos"]).sum() / dfr["dias_ativos"].sum()
                        media_pond_conv, _ = convert_vazao(pd.Series([media_pond]), unidade_sel)

                        fig.add_hline(
                            y=float(media_pond_conv.iloc[0]), line_dash="dash", line_width=2, line_color="red",
                            annotation_text=f"M√©dia Ponderada {media_pond_conv.iloc[0]:.2f} {unit_suffix}",
                            annotation_position="top right"
                        )

                    # Linha Azul Vazao_Aloc se existir
                    if "Vazao_Aloc" in dfr.columns:
                        y_aloc, _ = convert_vazao(dfr["Vazao_Aloc"], unidade_sel)
                        fig.add_trace(go.Scatter(
                            x=dfr["Data"], y=y_aloc, mode="lines",
                            name="Vaz√£o Alocada", line=dict(color="blue", width=2, dash="dot"),
                            hovertemplate=f"<b>Vaz√£o Alocada</b><br>Data: %{{x|%d/%m/%Y}}<br>"
                                          f"Vaz√£o: %{{y:.3f}} {unit_suffix}<extra></extra>"
                        ))

        # Legenda na parte inferior
        fig.update_layout(
            legend=dict(orientation="h", yanchor="bottom", y=-0.3, xanchor="center", x=0.5),
            height=500,
            title="Evolu√ß√£o da Vaz√£o Operada por Reservat√≥rio"
        )

        st.plotly_chart(fig, use_container_width=True, config={"displaylogo": False}, key="plotly_vazao_evolucao")
    else:
        st.info("Nenhum reservat√≥rio encontrado para exibir o gr√°fico.")
else:
    st.info("Dados insuficientes para exibir o gr√°fico de evolu√ß√£o.")

# =====================================================================
# üìä Volume acumulado por reservat√≥rio
# =====================================================================
st.subheader("üìä Volume acumulado por reservat√≥rio")

cols_necessarias = {"Reservat√≥rio Monitorado", "Data", "Vaz√£o Operada"}
tem_cols = cols_necessarias.issubset(set(df_filtrado.columns))
tem_res = not df_filtrado.empty and df_filtrado["Reservat√≥rio Monitorado"].nunique() > 0

if tem_cols and tem_res:
    df_box = df_filtrado.copy()
    df_box["Data"] = pd.to_datetime(df_box["Data"], errors="coerce")
    df_box["Vaz√£o Operada"] = pd.to_numeric(df_box["Vaz√£o Operada"], errors="coerce").fillna(0)

    volumes = []
    fim_periodo_global = df_box["Data"].max()

    for reservatorio in df_box["Reservat√≥rio Monitorado"].dropna().unique():
        df_res = (
            df_box[df_box["Reservat√≥rio Monitorado"] == reservatorio]
            .dropna(subset=["Data"])
            .sort_values("Data")
            .copy()
        )
        if df_res.empty:
            continue

        # Dias entre medi√ß√µes (fecha √∫ltimo intervalo at√© o fim do per√≠odo global)
        df_res["dias_entre_medicoes"] = df_res["Data"].diff().dt.days.fillna(0)
        ultima_data_res = df_res["Data"].iloc[-1]
        fim_periodo = fim_periodo_global if pd.notna(fim_periodo_global) else ultima_data_res
        df_res.loc[df_res.index[-1], "dias_entre_medicoes"] = max((fim_periodo - ultima_data_res).days + 1, 0)

        # Se Vaz√£o Operada est√° em l/s, converter para m¬≥/s dividindo por 1000
        segundos_por_dia = 86400
        vazao_m3s = df_res["Vaz√£o Operada"] / 1000.0
        df_res["volume_periodo_m3"] = vazao_m3s * segundos_por_dia * df_res["dias_entre_medicoes"]

        volume_total_m3 = float(df_res["volume_periodo_m3"].sum())
        volumes.append({"Reservat√≥rio Monitorado": reservatorio, "Volume Acumulado (m¬≥)": volume_total_m3})

    df_volumes = pd.DataFrame(volumes)

    def fmt_m3(x):
        if pd.isna(x):
            return "-"
        if x >= 1_000_000:
            return f"{x/1e6:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".") + " mi m¬≥"
        elif x >= 1_000:
            return f"{x/1e3:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".") + " mil m¬≥"
        else:
            return f"{x:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".") + " m¬≥"

    if not df_volumes.empty:
        df_volumes["Volume Formatado"] = df_volumes["Volume Acumulado (m¬≥)"].apply(fmt_m3)
        df_volumes["Volume Eixo Y"] = df_volumes["Volume Acumulado (m¬≥)"] / 1e6
        df_volumes = df_volumes.sort_values("Volume Eixo Y", ascending=False)

        y_max = float(df_volumes["Volume Eixo Y"].max()) if not df_volumes.empty else 1.0
        y_max = y_max * 1.2 if y_max > 0 else 1.0
        y_title = "Volume acumulado em milh√µes de m¬≥"

        base = alt.Chart(df_volumes).encode(
            x=alt.X("Reservat√≥rio Monitorado:N", title="Reservat√≥rio", sort="-y")
        ).properties(
            title="Volume acumulado por reservat√≥rio",
            height=400
        ).interactive()

        bars = base.mark_bar(color="steelblue").encode(
            y=alt.Y("Volume Eixo Y:Q", title=y_title, scale=alt.Scale(domain=[0, y_max])),
            tooltip=[
                alt.Tooltip("Reservat√≥rio Monitorado:N", title="Reservat√≥rio"),
                alt.Tooltip("Volume Formatado:N", title="Volume total")
            ]
        )

        # Texto com o valor formatado em cima de cada barra
        text = base.mark_text(
            align="center",
            baseline="bottom",
            dy=-5,
            fontSize=12
        ).encode(
            y=alt.Y("Volume Eixo Y:Q", stack=None),
            text="Volume Formatado:N"
        )

        chart = alt.layer(bars, text).resolve_scale(y="independent")
        st.altair_chart(chart, use_container_width=True)
    else:
        st.info("Sem dados suficientes para montar o gr√°fico.")
else:
    st.info("Sem dados suficientes para o gr√°fico de volume.")

# =====================================================================
# üèûÔ∏è M√©dia da Vaz√£o Operada por reservat√≥rio ‚Äî CORRIGIDO
# =====================================================================
st.subheader("üèûÔ∏è M√©dia da Vaz√£o Operada por Reservat√≥rio")

if not df_filtrado.empty and "Reservat√≥rio Monitorado" in df_filtrado.columns:
    dfm = df_filtrado.copy()
    dfm["Data"] = pd.to_datetime(dfm["Data"], errors="coerce")
    dfm = dfm.dropna(subset=["Data", "Reservat√≥rio Monitorado"])
    
    # Data m√°xima do dataset (mesma refer√™ncia do gr√°fico de Evolu√ß√£o)
    data_maxima_dataset = dfm["Data"].max()

    # 1 leitura por dia por reservat√≥rio (√∫ltima do dia), igual ao gr√°fico de Evolu√ß√£o
    df_diario = (
        dfm.sort_values("Data")
          .groupby(["Reservat√≥rio Monitorado", "Data"], as_index=False)
          .last()
    )

    # M√™s e ano para n√£o misturar per√≠odos
    meses_map = {1:"Jan", 2:"Fev", 3:"Mar", 4:"Abr", 5:"Mai", 6:"Jun",
                7:"Jul", 8:"Ago", 9:"Set", 10:"Out", 11:"Nov", 12:"Dez"}
    df_diario["Ano"] = df_diario["Data"].dt.year
    df_diario["M√™s"] = df_diario["Data"].dt.month.map(meses_map)
    df_diario["M√™sRef"] = df_diario["M√™s"] + "/" + df_diario["Ano"].astype(str)

    # Fun√ß√£o para calcular m√©dia ponderada mensal (MESMA metodologia do gr√°fico de Evolu√ß√£o)
    def calcular_media_ponderada_mensal(grupo):
        grupo = grupo.sort_values('Data')
        grupo = grupo.copy()
        grupo['dias_ativos'] = grupo['Data'].diff().dt.days.fillna(0)
        
        # CORRE√á√ÉO: Usar a mesma l√≥gica do gr√°fico de Evolu√ß√£o
        # Para o √∫ltimo registro, calcular dias at√© a data m√°xima do dataset
        if not grupo.empty:
            ultima_data = grupo['Data'].iloc[-1]
            
            # Se for o √∫ltimo m√™s do dataset, vai at√© data_maxima_dataset
            # Se for m√™s anterior, vai at√© o final do m√™s
            if ultima_data.month == data_maxima_dataset.month and ultima_data.year == data_maxima_dataset.year:
                # √öltimo m√™s: usa data m√°xima do dataset (igual gr√°fico Evolu√ß√£o)
                dias_restantes = (data_maxima_dataset - ultima_data).days + 1
            else:
                # M√™s completo: vai at√© o final do m√™s
                fim_mes = ultima_data + pd.offsets.MonthEnd(0)
                dias_restantes = (fim_mes - ultima_data).days + 1
            
            grupo.loc[grupo.index[-1], 'dias_ativos'] = dias_restantes
        
        # Calcular m√©dia ponderada (mesma metodologia do gr√°fico de Evolu√ß√£o)
        vazao_total_ponderada = (grupo['Vaz√£o Operada'] * grupo['dias_ativos']).sum()
        dias_totais = grupo['dias_ativos'].sum()
        
        return vazao_total_ponderada / dias_totais if dias_totais > 0 else 0

    # Calcular m√©dia mensal ponderada (igual √† metodologia do gr√°fico de Evolu√ß√£o)
    try:
        media_mensal = (
            df_diario.groupby(["Reservat√≥rio Monitorado", "M√™sRef"], dropna=True)
                     .apply(calcular_media_ponderada_mensal)
                     .reset_index(name='Vaz√£o Operada')
        )

        if not media_mensal.empty:
            # Mesma unidade do gr√°fico de evolu√ß√£o
            y_vals_media, unit_suffix_media = convert_vazao(media_mensal["Vaz√£o Operada"], unidade_sel)
            media_mensal["Vaz√£o (conv)"] = y_vals_media

            # Ordena reservat√≥rios pelo total do per√≠odo
            ordem_res = (
                media_mensal.groupby("Reservat√≥rio Monitorado")["Vaz√£o (conv)"]
                            .sum().sort_values(ascending=True).index.tolist()
            )

            # Ordena M√™sRef cronologicamente
            inv_meses = {v: k for k, v in meses_map.items()}
            media_mensal["ord"] = media_mensal["M√™sRef"].apply(
                lambda s: int(s.split("/")[1]) * 100 + inv_meses[s.split("/")[0]]
            )
            media_mensal = media_mensal.sort_values("ord")
            ordem_mesref = media_mensal["M√™sRef"].unique().tolist()

            # Rotulagem com pontos e unidade
            def format_val_dot(v: float, unit: str) -> str:
                if pd.isna(v):
                    return "- " + unit
                if abs(v) < 1000:
                    s = f"{v:.3f}"
                else:
                    s = f"{v:,.2f}".replace(",", ".")
                return f"{s} {unit}"

            media_mensal["Valor Formatado"] = media_mensal["Vaz√£o (conv)"].apply(lambda v: format_val_dot(v, unit_suffix_media))

            # Gr√°fico horizontal empilhado por M√™s/Ano
            fig_media = px.bar(
                media_mensal,
                y="Reservat√≥rio Monitorado",
                x="Vaz√£o (conv)",
                color="M√™sRef",
                orientation="h",
                text="Valor Formatado",
                category_orders={"Reservat√≥rio Monitorado": ordem_res, "M√™sRef": ordem_mesref},
                labels={
                    "Reservat√≥rio Monitorado": "Reservat√≥rio",
                    "Vaz√£o (conv)": f"M√©dia ({unit_suffix_media})",
                    "M√™sRef": "M√™s/Ano"
                },
                barmode="stack",
                hover_data={
                    "Vaz√£o (conv)": False,
                    "Valor Formatado": True
                }
            )

            fig_media.update_traces(textposition="inside", insidetextanchor="middle", cliponaxis=False)
            fig_media.update_layout(
                bargap=0.2,
                legend_title_text="M√™s/Ano",
                xaxis_title=f"M√©dia ({unit_suffix_media})",
                yaxis_title="Reservat√≥rio",
                height=500
            )

            st.plotly_chart(fig_media, use_container_width=True, config={"displaylogo": False}, key="plotly_vazao_media_res_mes_alinhado")
        else:
            st.info("Sem dados para calcular a m√©dia.")
    except Exception as e:
        st.error(f"Erro ao calcular m√©dia: {str(e)}")
else:
    st.info("Sem dados para a m√©dia.")
